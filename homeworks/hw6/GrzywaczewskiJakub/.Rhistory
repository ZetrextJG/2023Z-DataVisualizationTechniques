library(ggplot2)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lng = 21.007135613409062, lat = 52.22217811913538, popup = "Wydział MiNI")
# data.frame
df <- read.csv("https://raw.githubusercontent.com/MI2-Education/2023Z-DataVisualizationTechniques/main/homeworks/hw1/house_data.csv")
sam <- sample(1:nrow(df), 0.01 * nrow(df))
leaflet(df[sam,]) %>%
addTiles() %>%
addMarkers(lng = ~long, lat = ~lat)
# maps()
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL))
# points
m = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
library(ggalluvial)
ggplot(as.data.frame(UCBAdmissions),
aes(y = Freq, axis1 = Gender, axis2 = Dept)) +
geom_alluvium(aes(fill = Admit), width = 1/12) +
geom_stratum(width = 1/12, fill = "black", color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))
library(ggdist)
abc_df = data.frame(
value = rnorm(300, mean = c(1,2,3), sd = c(1,2,2)),
abc = c("a", "b", "c")
)
abc_df %>%
ggplot(aes(x = abc, y = value)) +
stat_dots(side = "both") +
ggtitle('stat_dots(side = "both")')
data.frame(
abc = c("a", "b", "b", "c"),
value = rnorm(200, c(1, 8, 8, 3), c(1, 1.5, 1.5, 1))
) %>%
ggplot(aes(y = abc, x = value, fill = abc)) +
stat_slab(aes(thickness = stat(pdf*n)), scale = 0.7) +
stat_dotsinterval(side = "bottom", scale = 0.7, slab_size = NA) +
scale_fill_brewer(palette = "Set2") +
ggtitle(paste0(
'stat_slab(aes(thickness = stat(pdf*n)), scale = 0.7) +\n',
'stat_dotsinterval(side = "bottom", scale = 0.7, slab_size = NA)'
),
'aes(fill = abc)'
)
library("ggbump")
df <- data.frame(country = rep(c("Indie", "Szwecja", "Niemcy"), each = 3),
year = rep(c(2011, 2012, 2013), 3),
value = round(runif(9, 300, 800), 0)
)
df %>%
group_by(year) %>%
mutate(rank = rank(value, ties.method = "random")) %>%
ungroup() %>%
ggplot(aes(year, rank, color = country)) +
geom_bump()
df %>%
group_by(year) %>%
mutate(rank = rank(value, ties.method = "random")) %>%
ungroup() %>%
ggplot(aes(year, rank, color = country)) +
geom_bump()
library(ggbump)
df <- data.frame(country = rep(c("Indie", "Szwecja", "Niemcy"), each = 3),
year = rep(c(2011, 2012, 2013), 3),
value = round(runif(9, 300, 800), 0)
)
df %>%
group_by(year) %>%
mutate(rank = rank(value, ties.method = "random")) %>%
ungroup() %>%
ggplot(aes(year, rank, color = country)) +
geom_bump()
library(dplyr)
library(ggbump)
df <- data.frame(country = rep(c("Indie", "Szwecja", "Niemcy"), each = 3),
year = rep(c(2011, 2012, 2013), 3),
value = round(runif(9, 300, 800), 0)
)
df %>%
group_by(year) %>%
mutate(rank = rank(value, ties.method = "random")) %>%
ungroup() %>%
ggplot(aes(year, rank, color = country)) +
geom_bump()
library(ggbeeswarm)
# geom_jitter()
ggplot(iris,aes(Species, Sepal.Length)) + geom_jitter()
ggplot(iris,aes(Species, Sepal.Length)) + geom_quasirandom()
library(ggridges)
data <- data.frame(x = 1:5, y = rep(1, 5), height = c(0, 1, 3, 4, 2))
ggplot(data, aes(x, y, height = height)) + geom_ridgeline()
ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_density_ridges()
ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_density_ridges(scale = 1)
ggplot(iris, aes(x = Sepal.Length, y = Species)) + geom_density_ridges(scale = 5)
library(visNetwork)
nodes <- data.frame(id = 1:8,
label = c("Białystok", "Warszawa",
"Radom", "Sosnowiec",
"Kraków", "Wrocław",
"Gdańsk", "Lądek Zdrój"))
edges <- data.frame(from = c(2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 2),
to = c(6, 7, 3, 4, 4, 5, 6, 5, 6, 6, 8),
color = "red",
label = "droga",
title = "Miasta")
net <- visNetwork(nodes, edges, height = 600, width = 1000) %>%
visEdges(arrows = "from")  %>%
visLayout(randomSeed = 123)
net
nodes <- data.frame(id = 1:12,
label = c("Pole Mokotowskie", "Politechnika",
"Centrum", "Świętokrzyska",
"Ratusz Arsenał", "Dworzec Gdański",
"Rondo ONZ", "Rondo Daszyńskiego",
"Płocka", "Młynów",
"Nowy Świat-Uniwersytet", "Centrum Nauki Kopernik"))
edges <- data.frame(from = c(1, 2, 3, 4, 5, 4, 7, 8, 9, 4, 11),
to = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
net <- visNetwork(nodes, edges, height = 600, width = 1000) %>%
visEdges(arrows = "from")  %>%
visLayout(randomSeed = 123)
net
## 0) dane
library(dplyr)
library(ggplot2)
df <- readr::read_csv("https://raw.githubusercontent.com/mini-pw/2022Z-DataVisualizationTechniques/main/labs/lab11/covid.csv") %>%
select(location, date,
total_cases_per_million,
total_deaths_per_million,
new_deaths_per_million,
people_fully_vaccinated_per_hundred,
human_development_index,
median_age)
## 0) dane
library(dplyr)
library(ggplot2)
df <- readr::read_csv("https://raw.githubusercontent.com/mini-pw/2022Z-DataVisualizationTechniques/main/labs/lab11/covid.csv") %>%
select(location, date,
total_cases_per_million,
total_deaths_per_million,
new_deaths_per_million,
people_fully_vaccinated_per_hundred,
human_development_index,
median_age)
dim(df)
colnames(df)
## 1) gganimate
# https://gganimate.com/articles/gganimate.html
library(gganimate)
library(Rcpp)
library(gifski)
library(av)
?transition_reveal
p_line <- ggplot(df, aes(x = total_cases_per_million,
y = total_deaths_per_million)) +
geom_line(aes(group = location))
p_line
anim_line <- p_line +
transition_reveal(date)
anim_line
anim_point <- p_point +
labs(title = "{closest_state}") +
transition_states(date,
transition_length = 2,
state_length = 1)
animate(anim_point) # default nframes = 100
p_point <- ggplot(df, aes(x = total_cases_per_million,
y = total_deaths_per_million)) +
geom_point(aes(group = location))
p_point
anim_point <- p_point +
labs(title = "{closest_state}") +
transition_states(date,
transition_length = 2,
state_length = 1)
animate(anim_point) # default nframes = 100
anim_point2 <- p_point +
geom_text(aes(label = location), nudge_y = 100) +
# ggrepel::geom_text_repel(aes(label = location)) +
labs(title = "{previous_state} - {next_state}") +
transition_states(date)
anim_point2
p_hdi <- ggplot(df, aes(x = total_cases_per_million,
y = total_deaths_per_million)) +
geom_point(aes(color = human_development_index)) +
scale_colour_gradient2(midpoint = mean(df$human_development_index, na.rm = T)) +
theme_dark()
p_hdi
df_small <- df %>%
filter(location %in% c("Greece", "Ukraine", "Denmark", "Germany", "Austria",
"Poland")) %>%
mutate(location = forcats::fct_reorder(location, total_deaths_per_million))
p_age <- ggplot(df_small,
aes(x = location,
y = total_deaths_per_million)) +
geom_col(aes(fill = people_fully_vaccinated_per_hundred)) +
scale_fill_gradient2(midpoint = 50) +
theme_dark() +
coord_flip()
p_age
p_age +
labs(title = "{current_frame}") +
transition_manual(date)
# cumulative
# w tym wypadku nie usuwa słupków gdy maleje
ggplot(df_small,
aes(x = location,
y = total_deaths_per_million)) +
geom_col(aes(fill = people_fully_vaccinated_per_hundred)) +
scale_fill_gradient2(midpoint = 50) +
theme_dark() +
coord_flip() +
labs(title = "{current_frame}") +
transition_manual(date, cumulative = T)
## 2) rbokeh
# https://hafen.github.io/rbokeh/articles/rbokeh.html
library(rbokeh)
## 2) rbokeh
# https://hafen.github.io/rbokeh/articles/rbokeh.html
library(rbokeh)
install.packages("rbokeh")
install.packages("hexbin")
install.packages("hexbin")
install.packages("rbokeh")
## 2) rbokeh
# https://hafen.github.io/rbokeh/articles/rbokeh.html
library(rbokeh)
figure() %>%
ly_points(birth.rate, death.rate, data = SmarterPoland::countries,
color = continent)
## 3) ggiraph
# https://davidgohel.github.io/ggiraph/articles/offcran/using_ggiraph.html
library(ggiraph)
df_ggiraph <- SmarterPoland::countries %>%
mutate(onclick = sprintf("window.open(\"%s%s\")",
"http://en.wikipedia.org/wiki/",
as.character(gsub("'", "&#39;", country))))
my_gg <- ggplot(df_ggiraph,
aes(x = birth.rate, y = death.rate, color = continent)) +
geom_point_interactive(aes(tooltip = country, onclick = onclick))
girafe(code = print(my_gg))
## 4) vegalite
# https://github.com/hrbrmstr/vegalite
devtools::install_github("hrbrmstr/vegalite")
library(vegalite)
dat <- jsonlite::fromJSON('[
{"a": "A","b": 28}, {"a": "B","b": 55}, {"a": "C","b": 43},
{"a": "D","b": 91}, {"a": "E","b": 81}, {"a": "F","b": 53},
{"a": "G","b": 19}, {"a": "H","b": 87}, {"a": "I","b": 52}
]')
vegalite() %>%
add_data(dat) %>%
encode_x("a", "ordinal") %>%
encode_y("b", "quantitative") %>%
mark_bar() -> vl
vl
## 5) googleVis
# https://cran.r-project.org/web/packages/googleVis/vignettes/googleVis_examples.html
library(googleVis)
df = data.frame(
country = c("US", "GB", "BR"),
val1 = c(10, 13, 14),
val2 = c(23, 12, 32)
)
bar <- gvisBarChart(df)
plot(bar)
# Optain data
download.file("http://bit.ly/R-spatial-data", "R-spatial-data.zip")
setwd("~/Code/2023Z-DataVisualizationTechniques/homeworks/hw6/GrzywaczewskiJakub")
unzip("R-spatial-data.zip", exdir = "data")
philly_dataset <- read.csv("./data/PhillyEducation.csv")
View(philly_dataset)
philly_dataset_sf <- st_as_sf(philly_dataset, coords = c("POINT_X", "POINT_Y"))
philly_dataset <- read.csv("./data/PhillyEducation.csv")
library(st)
library(mapview)
library(sf)
install.packages("units")
